{"version":3,"sources":["components/buttonsTray/ButtonsTray.module.scss","components/header/Header.module.scss","components/filters/Filters.module.scss","components/dataContainer/dataCard/ImageContainer/ImageContainer.module.scss","components/footer/Footer.module.scss","components/dataContainer/DataContainer.module.scss","components/dataContainer/dataCard/DataCard.module.scss","components/dataContainer/dataCard/description/Description.module.scss","App/App.module.scss","components/header/Header.js","components/buttonsTray/ButtonsTray.js","components/filters/Filters.js","components/dataContainer/dataCard/ImageContainer/ImageContainer.js","components/dataContainer/dataCard/description/Description.js","components/dataContainer/dataCard/DataCard.js","components/dataContainer/DataContainer.js","components/footer/Footer.js","App/App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","BrandName","className","Classes","ButtonsTray","filterName","buttonsValues","updateFocused","selectedBUtton","Buttons","map","elem","key","Button","style","backgroundColor","onClick","displayButtons","Filters","launch_years","updateYear","selectedYear","success_launch","updateStatusLaunch","selectedStatusLaunch","success_land","updateStatusLand","selectedStatusLand","Filter","Heading","ImageContainer","imageUrl","src","alt","Image","Description","missionIds","launch_year","suc_lauch","Suc_land","length","DataCard","data","suc_launch","launch_success","links","mission_patch_small","mission_id","rocket","first_stage","cores","land_success","toString","DataContainer","dataContainer","data_elem","index","Footer","DeveloperName","LAUNCH_YEARS","LAUNCH_STATUS","BASE_API_URL","App","useState","year","setYear","successfulLaunch","setSuccessfulLaunch","successfulLand","setSuccessfulLand","dataFromApi","setdataFromApi","history","useHistory","getDataFromApi","pUrl","fetch","then","response","json","useEffect","push","filteredUrl","finalUrl","classes","pYear","pStatus","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d90c95be.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"ButtonsTray\":\"ButtonsTray_ButtonsTray__2ipCl\",\"filterName\":\"ButtonsTray_filterName__Xh5WO\",\"Buttons\":\"ButtonsTray_Buttons__3A-4T\",\"Button\":\"ButtonsTray_Button__2hVT1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Header\":\"Header_Header__ixk3p\",\"BrandName\":\"Header_BrandName__15fq5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Filter\":\"Filters_Filter__3UvkP\",\"Heading\":\"Filters_Heading__2wmHX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ImageContainer\":\"ImageContainer_ImageContainer__2oHTU\",\"Image\":\"ImageContainer_Image__1yCec\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Footer\":\"Footer_Footer__XSjsF\",\"DeveloperName\":\"Footer_DeveloperName__frx-h\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dataContainer\":\"DataContainer_dataContainer__8O_qY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"DataCard\":\"DataCard_DataCard__tHdZs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Description\":\"Description_Description__1bgCK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__2Pja-\"};","import React from 'react';\r\nimport Classes from './Header.module.scss';\r\n\r\nconst Header = ({BrandName}) => {\r\n    return(\r\n        <header className={Classes.Header}>\r\n            <span className={Classes.BrandName}>{BrandName}</span>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header;","import React from \"react\";\r\nimport Classes from \"./ButtonsTray.module.scss\";\r\n\r\nconst ButtonsTray = ({ filterName,buttonsValues, updateFocused, selectedBUtton }) => {\r\n  const displayButtons = () => {\r\n    if (buttonsValues) {\r\n      return buttonsValues.map((elem) => {\r\n        return elem === selectedBUtton ? (\r\n          <button\r\n            key={elem}\r\n            className={Classes.Button}\r\n            style={{ backgroundColor: \"rgb(101, 151, 1)\" }}\r\n            onClick={() => updateFocused(elem)}\r\n          >\r\n            {elem}\r\n          </button>\r\n        ) : (\r\n          <button\r\n            key={elem}\r\n            className={Classes.Button}\r\n            onClick={() => updateFocused(elem)}\r\n          >\r\n            {elem}\r\n          </button>\r\n        );\r\n      });\r\n    }\r\n  };\r\n  return (\r\n    <div className={Classes.ButtonsTray}>\r\n        <div className={Classes.filterName}>{filterName}</div>\r\n      <div className={Classes.Buttons}>{displayButtons()}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ButtonsTray;\r\n","import React from \"react\";\r\nimport ButtonsTray from \"../buttonsTray/ButtonsTray\";\r\nimport Classes from \"./Filters.module.scss\";\r\n\r\nconst Filters = ({\r\n  launch_years,\r\n  updateYear,\r\n  selectedYear,\r\n  success_launch,\r\n  updateStatusLaunch,\r\n  selectedStatusLaunch,\r\n  success_land,\r\n  updateStatusLand,\r\n  selectedStatusLand,\r\n}) => {\r\n\r\n  return (\r\n    <div className={Classes.Filter}>\r\n      <div className={Classes.Heading}>Filters</div>\r\n      {/* 1)for launch year */}\r\n      <ButtonsTray\r\n        filterName = \"Launch Year\"\r\n        buttonsValues={launch_years}\r\n        updateFocused={updateYear}\r\n        selectedBUtton={selectedYear}\r\n      />\r\n\r\n      {/* 2)for successful launch */}\r\n      <ButtonsTray\r\n        filterName = \"Successful Launch\"\r\n        buttonsValues={success_launch}\r\n        updateFocused={updateStatusLaunch}\r\n        selectedBUtton={selectedStatusLaunch}\r\n      />\r\n\r\n      {/* 3)for successful landing */}\r\n      <ButtonsTray\r\n        filterName = \"Successful Landing\"\r\n        buttonsValues={success_land}\r\n        updateFocused={updateStatusLand}\r\n        selectedBUtton={selectedStatusLand}\r\n      />\r\n      \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Filters;\r\n","import React from \"react\";\r\nimport Classes from \"./ImageContainer.module.scss\";\r\n\r\nconst ImageContainer = ({ imageUrl }) => {\r\n  const getImageImageUrl = () => {\r\n    const modifiedImageUrl = `https://images.weserv.nl/?url=${imageUrl}`;\r\n    return modifiedImageUrl;\r\n  };\r\n\r\n  return (\r\n    <div className={Classes.ImageContainer}>\r\n      <img src={getImageImageUrl()} alt=\"spacex\" className={Classes.Image} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ImageContainer;\r\n","import React from \"react\";\r\nimport Classes from \"./Description.module.scss\";\r\n\r\nconst Description = ({ missionIds, launch_year, suc_lauch, Suc_land }) => {\r\n  return (\r\n    <div className={Classes.Description}>\r\n      <table>\r\n        <tbody>\r\n          <tr>\r\n            <th>Mission Id's : </th>\r\n            <td>{missionIds.length !== 0 ? missionIds : \"No Ids\"}</td>\r\n          </tr>\r\n\r\n          <tr>\r\n            <th>Launch Year : </th>\r\n            <td>{launch_year}</td>\r\n          </tr>\r\n\r\n          <tr>\r\n            <th>Successful Launch : </th>\r\n            <td>{suc_lauch}</td>\r\n          </tr>\r\n\r\n          <tr>\r\n            <th>Successful Land : </th>\r\n            <td>{Suc_land}</td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Description;\r\n","import React from \"react\";\r\nimport Classes from \"./DataCard.module.scss\";\r\nimport ImageContainer from \"./ImageContainer/ImageContainer\";\r\nimport Description from \"./description/Description\";\r\n\r\nconst DataCard = ({ data }) => {\r\n  const suc_launch = data.launch_success ? \"true\" : \"false\";\r\n\r\n  const landingPath = () => {\r\n    if (\r\n      data &&\r\n      data.rocket &&\r\n      data.rocket.first_stage &&\r\n      data.rocket.first_stage.cores[0] &&\r\n      data.rocket.first_stage.cores[0].land_success\r\n    ) {\r\n      return data.rocket.first_stage.cores[0].land_success.toString();\r\n    } else {\r\n      return \"NA\";\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={Classes.DataCard}>\r\n      <ImageContainer imageUrl={data.links.mission_patch_small} />\r\n      <Description\r\n        missionIds={data.mission_id}\r\n        launch_year={data.launch_year}\r\n        suc_lauch={suc_launch}\r\n        Suc_land={landingPath()}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DataCard;\r\n","import React from 'react';\r\nimport Classes from './DataContainer.module.scss';\r\nimport DataCard from './dataCard/DataCard';\r\n\r\nconst DataContainer = ({data}) => {\r\n\r\n    const renderDataCards = () => {\r\n        return data.map((data_elem,index)=><DataCard data = {data_elem} key ={index}/>);\r\n    }\r\n    return (\r\n        <div className={Classes.dataContainer}>\r\n            {renderDataCards()}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DataContainer;","import React from 'react';\r\nimport Classes from './Footer.module.scss';\r\n\r\nconst Footer = ({DeveloperName}) => {\r\n    return(\r\n        <footer className={Classes.Footer}>\r\n            <span className={Classes.DeveloperName}><strong>Developer By : </strong> {DeveloperName}</span>\r\n        </footer>\r\n    );\r\n}\r\n\r\nexport default Footer;","import React, { useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nimport Header from \"../components/header/Header\";\nimport Filters from \"../components/filters/Filters\";\nimport DataContainer from \"../components/dataContainer/DataContainer\";\n\nimport classes from \"./App.module.scss\";\nimport Footer from \"../components/footer/Footer\";\n\nconst BRAND_NAME = \"SpaceX Launch Programs\";\nconst DEVELOPER_NAME = \"ROHIT ANAND\";\nconst LAUNCH_YEARS = [\n  2006,\n  2007,\n  2008,\n  2009,\n  2010,\n  2011,\n  2012,\n  2013,\n  2014,\n  2015,\n  2016,\n  2017,\n  2018,\n  2019,\n  2020,\n];\n\nconst LAUNCH_STATUS = [\"true\", \"false\"];\nconst BASE_API_URL = \"https://api.spaceXdata.com/v3/launches?limit=100\";\n\nconst App = () => {\n  const [year, setYear] = useState(null);\n  const [successfulLaunch, setSuccessfulLaunch] = useState(null);\n  const [successfulLand, setSuccessfulLand] = useState(null);\n  const [dataFromApi, setdataFromApi] = useState(null);\n\n  let history = useHistory();\n\n  const updateYear = (pYear) => {\n    pYear === year ? setYear(null) : setYear(pYear);\n  };\n\n  const updateStatusLaunch = (pStatus) => {\n    pStatus === successfulLaunch\n      ? setSuccessfulLaunch(null)\n      : setSuccessfulLaunch(pStatus);\n  };\n\n  const updateStatusLand = (pStatus) => {\n    pStatus === successfulLand\n      ? setSuccessfulLand(null)\n      : setSuccessfulLand(pStatus);\n  };\n\n  const getDataFromApi = (pUrl) => {\n    fetch(pUrl)\n      .then((response) => response.json())\n      .then((data) => setdataFromApi(data));\n  };\n\n  useEffect(() => {\n    getDataFromApi(BASE_API_URL);\n    history.push(\"/home\");\n  }, []);\n\n  useEffect(() => {\n    const apiBaseUrl = BASE_API_URL;\n    let filteredUrl = \"\";\n    let finalUrl = \"\";\n\n    if (successfulLaunch === null && successfulLand === null && year === null) {\n      getDataFromApi(BASE_API_URL);\n      history.push(\"/home\");\n\n    } else {\n      if (successfulLaunch !== null) {\n        filteredUrl = `&launch_success=${successfulLaunch}`;\n      }\n\n      if (successfulLand !== null) {\n        filteredUrl = `${filteredUrl}&land_success=${successfulLand}`;\n      }\n\n      if (year) {\n        filteredUrl = `${filteredUrl}&launch_year=${year}`;\n      }\n\n      finalUrl = `${apiBaseUrl}${filteredUrl}`;\n\n      getDataFromApi(finalUrl);\n      history.push(`/${filteredUrl}`);\n    }\n  }, [year, successfulLaunch, successfulLand]);\n\n  const renderMainComponent = () => {\n    if (dataFromApi) {\n      return <DataContainer data={dataFromApi} />;\n    } else {\n      return null;\n    }\n  };\n\n  return (\n    <div className={classes.App}>\n      <Header BrandName={BRAND_NAME} />\n\n      <main>\n        <Filters\n          launch_years={LAUNCH_YEARS}\n          updateYear={updateYear}\n          selectedYear={year}\n          success_launch={LAUNCH_STATUS}\n          updateStatusLaunch={updateStatusLaunch}\n          selectedStatusLaunch={successfulLaunch}\n          success_land={LAUNCH_STATUS}\n          updateStatusLand={updateStatusLand}\n          selectedStatusLand={successfulLand}\n        />\n\n        {renderMainComponent()}\n      </main>\n\n      <Footer DeveloperName={DEVELOPER_NAME}/>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from \"react-router-dom\";\n\nimport './index.scss';\nimport App from './App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}